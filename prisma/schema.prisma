// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid()) @map("_id")
  email            String            @unique
  username         String            @unique
  avatar           String?
  password         String
  city             String?
  isAdmin          Boolean           @default(false)
  isVerified       Boolean           @default(false)
  verifyToken      String?
  resetToken       String?
  resetTokenExpiry DateTime?
  updatedAt        DateTime          @updatedAt
  createdAt        DateTime          @default(now())
  reactPort        Int               @default(3001)
  folders          Folder[]
  snippets         Snippets[]
  SnippetComments  SnippetComments[]
  editorSettings   EditorSettings?
  systemLanguage   SystemLanguages   @default(turkish)
  ReactProjects    ReactProjects[]
}

model EditorSettings {
  id String @id @default(uuid()) @map("_id")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  fontSize    Int      @default(14)
  theme       String   @default("dark-plus")
  tabSize     Int      @default(2)
  wordWrap    Boolean  @default(true)
  autoSave    Boolean  @default(false)
  lineNumbers Boolean  @default(true)
  minimap     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Folder {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files     File[]
  parentId  String?
  parent    Folder?  @relation("SubFolders", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Folder[] @relation("SubFolders")
  type      Type     @default(folder)
}

model File {
  id        String   @id @default(uuid()) @map("_id")
  name      String
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  type      Type     @default(file)
}

model Snippets {
  id      String @id @default(uuid()) @map("_id")
  name    String
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  SnippetComments SnippetComments[]

  @@unique([name])
}

model SnippetComments {
  id      String @id @default(uuid()) @map("_id")
  content String
  star    Int    @default(0) // 0-5

  snippetId String
  snippet   Snippets @relation(fields: [snippetId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReactProjects {
  id       String @id @default(uuid()) @map("_id")
  name     String
  realPath String
  port     Int    @default(3001)

  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Type {
  file
  folder
}

enum SystemLanguages {
  turkish
  english
}
